{"version":3,"sources":["../../js/src/utilities/deep-objects-merge.js","../../js/src/utilities/get-style.js","../../js/src/utilities/get-css-custom-properties.js","../../js/src/utilities/classes.js","../../js/src/utilities/get-color.js","../../js/src/utilities/hex-to-rgb.js","../../js/src/utilities/hex-to-rgba.js","../../js/src/utilities/rgb-to-hex.js"],"names":["getStyle","property","element","style","document","body","match","isCustomProperty","Boolean","documentMode","cssCustomProperties","sheets","styleSheets","cssText","i","length","rules","cssRules","j","selectorText","substring","lastIndexOf","split","forEach","name","value","trim","getCssCustomProperties","window","getComputedStyle","getPropertyValue","replace","breakpoint","list","indexOf","deepObjectsMerge","target","source","_i","_Object$keys","Object","keys","key","assign","rawProperty","color","TypeError","r","g","b","Error","parseInt","slice","opacity","rgb","toString"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): deep-objects-merge.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\nconst deepObjectsMerge = (target, source) => {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], deepObjectsMerge(target[key], source[key]))\n    }\n  }\n\n  // Join `target` and modified `source`\n  Object.assign(target || {}, source)\n  return target\n}\n\nexport default deepObjectsMerge\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): get-style.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\nimport getCssCustomProperties from './get-css-custom-properties'\n\nconst minIEVersion = 10\nconst isIE1x = () => Boolean(document.documentMode) && document.documentMode >= minIEVersion\nconst isCustomProperty = property => property.match(/^--.*/i)\n\nconst getStyle = (property, element = document.body) => {\n  let style\n\n  if (isCustomProperty(property) && isIE1x()) {\n    const cssCustomProperties = getCssCustomProperties()\n    style = cssCustomProperties[property]\n  } else {\n    style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '')\n  }\n\n  return style\n}\n\nexport default getStyle\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): get-css-custom-properties.js\n * Licensed under MIT (https://coreui.io/license)\n * @returns {string} css custom property name\n * --------------------------------------------------------------------------\n */\nconst getCssCustomProperties = () => {\n  const cssCustomProperties = {}\n  const sheets = document.styleSheets\n  let cssText = ''\n  for (let i = sheets.length - 1; i > -1; i--) {\n    const rules = sheets[i].cssRules\n    for (let j = rules.length - 1; j > -1; j--) {\n      if (rules[j].selectorText === '.ie-custom-properties') {\n        // eslint-disable-next-line prefer-destructuring\n        cssText = rules[j].cssText\n        break\n      }\n    }\n\n    if (cssText) {\n      break\n    }\n  }\n\n  // eslint-disable-next-line unicorn/prefer-string-slice\n  cssText = cssText.substring(\n    cssText.lastIndexOf('{') + 1,\n    cssText.lastIndexOf('}')\n  )\n\n  cssText.split(';').forEach(property => {\n    if (property) {\n      const name = property.split(': ')[0]\n      const value = property.split(': ')[1]\n      if (name && value) {\n        cssCustomProperties[`--${name.trim()}`] = value.trim()\n      }\n    }\n  })\n  return cssCustomProperties\n}\n\nexport default getCssCustomProperties\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): classes.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\nexport const sidebarCssClasses = [\n  'sidebar-show',\n  'sidebar-sm-show',\n  'sidebar-md-show',\n  'sidebar-lg-show',\n  'sidebar-xl-show'\n]\n\nexport const asideMenuCssClasses = [\n  'aside-menu-show',\n  'aside-menu-sm-show',\n  'aside-menu-md-show',\n  'aside-menu-lg-show',\n  'aside-menu-xl-show'\n]\n\nexport const validBreakpoints = ['sm', 'md', 'lg', 'xl']\n\nexport function checkBreakpoint(breakpoint, list) {\n  return list.indexOf(breakpoint) > -1\n}\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): get-color.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\nimport getStyle from './get-style'\n\nconst getColor = (rawProperty, element = document.body) => {\n  const property = `--${rawProperty}`\n  const style = getStyle(property, element)\n  return style ? style : rawProperty\n}\n\nexport default getColor\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): hex-to-rgb.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgb = color => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n\n  if (!hex) {\n    throw new Error(`${color} is not a valid hex color`)\n  }\n\n  let r\n  let g\n  let b\n\n  if (color.length === 7) {\n    r = parseInt(color.slice(1, 3), 16)\n    g = parseInt(color.slice(3, 5), 16)\n    b = parseInt(color.slice(5, 7), 16)\n  } else {\n    r = parseInt(color.slice(1, 2), 16)\n    g = parseInt(color.slice(2, 3), 16)\n    b = parseInt(color.slice(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b})`\n}\n\nexport default hexToRgb\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v3.0.0-beta.4): hex-to-rgba.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgba = (color, opacity = 100) => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n\n  if (!hex) {\n    throw new Error(`${color} is not a valid hex color`)\n  }\n\n  let r\n  let g\n  let b\n\n  if (color.length === 7) {\n    r = parseInt(color.slice(1, 3), 16)\n    g = parseInt(color.slice(3, 5), 16)\n    b = parseInt(color.slice(5, 7), 16)\n  } else {\n    r = parseInt(color.slice(1, 2), 16)\n    g = parseInt(color.slice(2, 3), 16)\n    b = parseInt(color.slice(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${opacity / 100})`\n}\n\nexport default hexToRgba\n","/**\n * --------------------------------------------------------------------------\n * CoreUI (v3.0.0-beta.4): rgb-to-hex.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst rgbToHex = color => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  if (color === 'transparent') {\n    return '#00000000'\n  }\n\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\n\n  if (!rgb) {\n    throw new Error(`${color} is not a valid rgb color`)\n  }\n\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\n\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\n}\n\nexport default rgbToHex\n"]}